Valid expressions:
a + b
a && b
a.b.c = 5
this.a.b.c = 5
this/*test*/.a.b.c = a.b.c.d
(int) a.b.c.d
(50) - 50
a + b * c
a == b && c != d
a > b || c < d
a instanceof MyClass
!flag

a.b()
a.b().c()
a.b[1].c.d.[1].e.d.f()[4].e
array[1+3*2-3/5%6]

a = b = c
a + b
a - b
a * b
a / b
a % b
a == b
a != b
a > b
a < b
a >= b
a <= b
a && b
a || b
!a
a & b
a | b
a ^ b
~a | b ^ a & c & d
(f).h()
(h)-g.f()

(new a.b.d.e ((new a.b.d.e ()).new Obj())).new Obj()
(int)(boolean)(char)(byte)(short) a.b.d
(int) a().a
(int) this
(int) ("whatthe").new Obj()

Expressions that depend on other expressions:
a = new a.b.d(<expr>)
(1+2).new Obj(<expr>)
(1+2).new Obj(<expr>)
something.new Obj(<expr>).new Obj(<expr>).new Obj(<expr>)
("whatthe").new Obj(<expr>)
('a').new Obj(<expr>)
(999192939).new Obj(<expr>)
(<expr>).new Obj(<expr>)
(int) (<expr>)
(int) new a.b.d.e[<expr>]

a.b.c.d[<expr>]


...

Invalid expressions:

a << b
a >> b
a >>> b
a += b
a -= b
a *= b
a /= b
a %= b
a &= b
a |= b
a ^= b
a <<= b
a >>= b
a >>>= b

...

Valid statements:

;
{}
{;}
{ { Return; } { Return; } Return; }
{{{}{{}{}}{}}{}}
int x = 5;
x[] = <expr>
a.b.c.d. x = <expr> 
int x = <expr>;
return x;
Return <expr>;
Return <new expr>;
func();
<expr>;
if(<expr>) if(<expr>) else
if(<expr>) if(<expr>) else else 
if(<expr>) {} else if (<expr>) {} else {}
while(<expr>) {}
for(;;) {}
for(int i = 0; ; i++) {}
for(int i = 0; <expr>; i++) {}
for(func(); ; ) {}
for(<new expr>; ; ) {}
for(func(); ; anotherfunc()) {}
for(<new expr>; ; <newexpr>) {}

Invalid statements:

for(int i = 0, y = 0; <expr>; i++, y++) {}

...

Valid methods:

Invalid methods:

...

Valid classes:

Invalid classes:

...

Valid programs:

Invalid programs:






